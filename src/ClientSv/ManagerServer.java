/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ClientSv;

import java.awt.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author phamt
 */
public class ManagerServer extends javax.swing.JFrame {
    private ArrayList<Server> list ;
    private boolean[] statecomputer = new boolean[20];
    DefaultTableModel model;
    public ManagerServer() {
        initComponents();
        this.setLocationRelativeTo(null);
        list  = new ArrayList<>();
        model = (DefaultTableModel) TblListAcc.getModel();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnSort = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BtnTurnOn = new javax.swing.JButton();
        BtnTurnOff = new javax.swing.JButton();
        BtnDeposit = new javax.swing.JButton();
        BtnEditAcc = new javax.swing.JButton();
        BtnRemvAcc = new javax.swing.JButton();
        BtnSeekAcc = new javax.swing.JButton();
        BtnTurnOver = new javax.swing.JButton();
        BtnStatis = new javax.swing.JButton();
        UserLabel = new javax.swing.JLabel();
        PassLabel = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtPass = new javax.swing.JTextField();
        BtnCreatAcc = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblListAcc = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 700));

        BtnSort.setText("Sắp Xếp");
        BtnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSortActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Phần Mềm Quản Lý Quán Internet");

        BtnTurnOn.setText("Mở Máy");
        BtnTurnOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTurnOnActionPerformed(evt);
            }
        });

        BtnTurnOff.setText("Tắt Máy");
        BtnTurnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTurnOffActionPerformed(evt);
            }
        });

        BtnDeposit.setText("Nạp Tiền");
        BtnDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDepositActionPerformed(evt);
            }
        });

        BtnEditAcc.setText("Sửa Tài Khoản");
        BtnEditAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEditAccActionPerformed(evt);
            }
        });

        BtnRemvAcc.setText("Xóa Tài Khoản");
        BtnRemvAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRemvAccActionPerformed(evt);
            }
        });

        BtnSeekAcc.setText("Tìm Kiếm");
        BtnSeekAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSeekAccActionPerformed(evt);
            }
        });

        BtnTurnOver.setText("Tổng Kết");
        BtnTurnOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTurnOverActionPerformed(evt);
            }
        });

        BtnStatis.setText("Thống Kê");
        BtnStatis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnStatisActionPerformed(evt);
            }
        });

        UserLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        UserLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UserLabel.setText("UserName :");
        UserLabel.setPreferredSize(new java.awt.Dimension(200, 100));

        PassLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        PassLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PassLabel.setText("Password :");
        PassLabel.setPreferredSize(new java.awt.Dimension(200, 100));

        txtUser.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtUser.setPreferredSize(new java.awt.Dimension(200, 30));
        txtUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtUserMouseClicked(evt);
            }
        });
        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });

        txtPass.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPass.setPreferredSize(new java.awt.Dimension(200, 30));
        txtPass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPassMouseClicked(evt);
            }
        });

        BtnCreatAcc.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        BtnCreatAcc.setText("Tạo Tài Khoản");
        BtnCreatAcc.setPreferredSize(new java.awt.Dimension(110, 30));
        BtnCreatAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCreatAccActionPerformed(evt);
            }
        });

        TblListAcc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Tên Tài Khoản", "Mật Khẩu", "Thời Gian", "Điểm"
            }
        ));
        jScrollPane1.setViewportView(TblListAcc);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Danh Sách Tài Khoản");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel2.setPreferredSize(new java.awt.Dimension(500, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnStatis, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnSeekAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnTurnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnEditAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnRemvAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(BtnTurnOver, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnSort, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166)
                        .addComponent(BtnCreatAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BtnTurnOn, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BtnTurnOn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnTurnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnDeposit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnEditAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnRemvAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnCreatAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnSort, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(BtnSeekAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(BtnTurnOver, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(BtnStatis, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSortActionPerformed
        Collections.sort(list, new Comparator<Server>() {
        @Override
        public int compare(Server s1, Server s2) {
            return s1.getTenTK().compareTo(s2.getTenTK());
        }
        });
        model.setRowCount(0);
        int x =1;
        for (Server server : list) {
            server.setId(x++);
            model.addRow(new Object[]{server.getId(), server.getTenTK(), server.getMkTK(), server.getThoiGian(), server.getPoint()});
        }
    }//GEN-LAST:event_BtnSortActionPerformed

    private void BtnTurnOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTurnOnActionPerformed
        String input = JOptionPane.showInputDialog("Vui lòng nhập id máy (1-20)");
        if (input != null) {
            try {
                int id = Integer.parseInt(input) ;
                if (id >= 1 && id <= 20) {
                    if (!statecomputer[id - 1]) {
                        statecomputer[id - 1] = true;
                        JOptionPane.showMessageDialog(rootPane, "Máy " + id + " đã được mở thành công.");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Máy " + id + " đang hoạt động ");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Định dạng không chính xác. Vui lòng nhập lại từ 1 đến 20.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Định dạng không chính xác. Vui lòng nhập lại từ 1 đến 20.");
            }
        }
    }//GEN-LAST:event_BtnTurnOnActionPerformed

    private void BtnTurnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTurnOffActionPerformed
        String input = JOptionPane.showInputDialog("Vui lòng nhập id máy (1-20)");
        if (input != null) {
            try {
                int id = Integer.parseInt(input) ;
                if (id >= 1 && id <= 20) {
                    if (statecomputer[id - 1]) {
                        statecomputer[id - 1] = false;
                        JOptionPane.showMessageDialog(rootPane, "Máy " + id + " đã được tắt.");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Máy " + id + " đang không hoạt động ");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Định dạng không chính xác. Vui lòng nhập lại từ 1 đến 20.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Định dạng không chính xác. Vui lòng nhập lại từ 1 đến 20.");
            }
        }
    }//GEN-LAST:event_BtnTurnOffActionPerformed

    private void BtnDepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDepositActionPerformed
        String input = JOptionPane.showInputDialog("Nhập tên tài khoản muốn nạp tiền");
        boolean userAvailable = false;
        for (int i = 0; i < list.size(); i++) {
            Server s = list.get(i);
            if (s.getTenTK().equals(input)) {
                userAvailable = true;
                String money = JOptionPane.showInputDialog("Nhập số tiền:");
                try {
                    int amount = Integer.parseInt(money);
                    if (amount < 5000) {
                        JOptionPane.showMessageDialog(rootPane, "Số tiền quá nhỏ. Yêu cầu nhập số tiền lớn hơn 5000.");
                    } else {
                        double timeToAdd = 1.0 * amount * 60 / 8000 ;
                        s.setThoiGian(s.getThoiGian() + timeToAdd);
                        s.setDoanhThu(s.getDoanhThu() + amount);
                        model.setValueAt(s.getThoiGian(), i, 3); 
                        if(s.getPoint() < 5){
                            s.setPoint(s.getPoint() + 1);
                            JOptionPane.showMessageDialog(rootPane, "Nạp tiền thành công.");
                        }
                        else{
                            s.setPoint(0);
                            JOptionPane.showMessageDialog(rootPane, "Chúc mừng bạn đưuọc thưởng 1 chai nước.");
                        }
                        model.setValueAt(s.getPoint(), i, 4);                         
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(rootPane, "Số tiền không hợp lệ. Vui lòng nhập lại.");
                }
                break;
            }
        }
        if (!userAvailable && input != null) {
            JOptionPane.showMessageDialog(rootPane, "Tài khoản không tồn tại.");
        }

    }//GEN-LAST:event_BtnDepositActionPerformed

    private void BtnEditAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEditAccActionPerformed
        String input = JOptionPane.showInputDialog("Nhập tên tài khoản muốn sửa");
        boolean userAvailable = false;
        for (int i = 0; i < list.size(); i++) {
            Server s = list.get(i);
            if (s.getTenTK().equals(input)) {
                userAvailable = true;
                String newPassword = JOptionPane.showInputDialog("Nhập mật khẩu mới:");
                model.setValueAt(newPassword, i, 2);
            }
        }
        if (!userAvailable && input != null) {
            JOptionPane.showMessageDialog(rootPane, "Tài khoản không tồn tại.");
        }
    }//GEN-LAST:event_BtnEditAccActionPerformed

    private void BtnRemvAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRemvAccActionPerformed
        String input = JOptionPane.showInputDialog("Nhập tên tài khoản muốn xóa");
        boolean userAvailable = false;
        for (int i = 0; i < list.size(); i++) {
            Server s = list.get(i);
            if (s.getTenTK().equals(input)) {
                userAvailable = true;
                int confirmResult = JOptionPane.showConfirmDialog(rootPane, "Bạn có chắc muốn xóa tài khoản " + input + " không?");
                if (confirmResult == JOptionPane.YES_OPTION) {
                    model.removeRow(i);
                    list.remove(i);
                    count--;
                }                
            }
        }
        if (!userAvailable && input != null) {
            JOptionPane.showMessageDialog(rootPane, "Tài khoản không tồn tại.");
        }
    }//GEN-LAST:event_BtnRemvAccActionPerformed

    private void BtnSeekAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSeekAccActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog("Nhập tên tài khoản muốn tìm");
        boolean userAvailable = false;
        for (int i = 0; i < list.size(); i++) {
            Server s = list.get(i);
            if (s.getTenTK().equals(input)) {
                userAvailable = true;
               JOptionPane.showMessageDialog(rootPane, "Tài khoản " + input + " có số thứ tự " + s.getId() + " trong bảng");
            }
        }
        if (!userAvailable && input != null) {
            JOptionPane.showMessageDialog(rootPane, "Tài khoản không tồn tại.");
        }        
    }//GEN-LAST:event_BtnSeekAccActionPerformed

    private void BtnTurnOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTurnOverActionPerformed
        // TODO add your handling code here:
        double turnover = 0;
        for(Server s : list){
            turnover += s.getDoanhThu();
        }
        JOptionPane.showMessageDialog(rootPane,"Tổng doanh thu : " + turnover + "VNĐ" );        
    }//GEN-LAST:event_BtnTurnOverActionPerformed

    private void BtnStatisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnStatisActionPerformed
        // TODO add your handling code here:
        int comUse =0;
        for(boolean x :statecomputer ){
            if(x) comUse++;
        }
        JOptionPane.showMessageDialog(rootPane, "Số lượng máy đang sử dụng : " + comUse + "\n Số lượng máy còn trống : " + (20-comUse));
    }//GEN-LAST:event_BtnStatisActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserActionPerformed

    private void BtnCreatAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCreatAccActionPerformed
        boolean Useravail = false;
        if(txtUser.getText().isEmpty() || txtPass.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Tài khoản hoặc mật khẩu chưa được nhập!");
            return;
        }
        for (Server s : list) {
            if (s.getTenTK().equals(txtUser.getText())) {
                Useravail = true;
                break;
            }
        }
        if (Useravail) {
            JOptionPane.showMessageDialog(rootPane, "Tài khoản đã tồn tại. Vui lòng chọn tên đăng nhập khác.");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Tạo tài khoản thành công.");

            // Thêm tài khoản mới vào danh sách
            Server newServer = new Server();
            newServer.setTenTK(txtUser.getText());
            newServer.setMkTK(txtPass.getText());
            newServer.setThoiGian(0.0);
            newServer.setPoint(0);
            list.add(newServer);
            ShowTable();
        }
    }//GEN-LAST:event_BtnCreatAccActionPerformed

    private void txtUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtUserMouseClicked
        // TODO add your handling code here:
        txtUser.setText("");
    }//GEN-LAST:event_txtUserMouseClicked

    private void txtPassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPassMouseClicked
        // TODO add your handling code here:
        txtPass.setText("");
    }//GEN-LAST:event_txtPassMouseClicked
    int count = 0;
    public void ShowTable(){
        Server s = list.get(list.size() - 1);
        count++;
        s.setId(count);
        model.addRow(new Object[]{
            s.getId(),s.getTenTK(),s.getMkTK(),s.getThoiGian(),s.getPoint()
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCreatAcc;
    private javax.swing.JButton BtnDeposit;
    private javax.swing.JButton BtnEditAcc;
    private javax.swing.JButton BtnRemvAcc;
    private javax.swing.JButton BtnSeekAcc;
    private javax.swing.JButton BtnSort;
    private javax.swing.JButton BtnStatis;
    private javax.swing.JButton BtnTurnOff;
    private javax.swing.JButton BtnTurnOn;
    private javax.swing.JButton BtnTurnOver;
    private javax.swing.JLabel PassLabel;
    private javax.swing.JTable TblListAcc;
    private javax.swing.JLabel UserLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtPass;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
